{"files":[{"id":"cd2e04e8-659a-4898-a6d1-991f038d3e1e","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Kolkata\",\n  \"dependencies\": {},\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"dataStudio\": {\n    \"name\": \"KIT_KAT State wise Winner Distributors From KIT_KAT API\",\n    \"company\": \"Bigcity\",\n    \"companyUrl\": \"https://projects.bigcityapps.in/login\",\n    \"logoUrl\": \"https://projects.bigcityapps.in/images/Bigcitylogo.png\",\n    \"addonUrl\": \"https://projects.bigcityapps.in/login\",\n    \"supportUrl\": \"https://projects.bigcityapps.in/login\",\n    \"description\": \"Connect Data Studio to web service\"\n  }\n}"},{"id":"b958cca1-16b3-4c7a-a441-e0ef0fcfeb0f","name":"Code","type":"server_js","source":"function getConfig(request) {\n\n  var config \u003d {\n    dateRangeRequired: true,\n    configParams: []\n  };\n\n  return config;\n\n};\n\nvar issSchema \u003d [\n\n  {\n    name: \u0027state\u0027,\n    label: \u0027State\u0027,\n    description: \u0027State from Kit-Kat the New API\u0027,\n    dataType: \u0027STRING\u0027,\n    semantics: {\n      conceptType: \u0027DIMENSION\u0027,\n      semanticType: \u0027NUMBER\u0027,\n      \n    }\n  },\n  {\n    name: \u0027regCount\u0027,\n    label: \u0027Registration\u0027,\n    description: \u0027Total Registration Kit-Kat from the New  API\u0027,\n    dataType: \u0027NUMBER\u0027,\n    semantics: {\n      conceptType: \u0027METRIC\u0027,\n      semanticType: \u0027NUMBER\u0027\n    }\n  },\n  {\n    name: \u0027winnerCount\u0027,\n    label: \u0027Winner Count\u0027,\n    description: \u0027winner Count Code Kit-Kat from the New  API\u0027,\n    dataType: \u0027NUMBER\u0027,\n    semantics: {\n      conceptType: \u0027METRIC\u0027,\n      semanticType: \u0027NUMBER\u0027\n    }\n  },\n  {\n    name: \u0027addressFilledCount\u0027,\n    label: \u0027Address Filled Count\u0027,\n    description: \u0027Address Filled Count  from Kit-Kat the New API\u0027,\n    dataType: \u0027NUMBER\u0027,\n    semantics: {\n      conceptType: \u0027METRIC\u0027,\n      semanticType: \u0027NUMBER\u0027\n    }\n  }\n\n];\n\n\nfunction getSchema(request) {\n\n  return { schema: issSchema };\n\n};\n\n\nfunction getData(request) {\n\n  Logger.log(\"Request from Data Studio\");\n  Logger.log(request);\n\n  // Set the url\n\n  var url \u003d \u0027https://www.theultimatebreak.com/api/analytics/stateDistribution/eZeVbv97mX3xaJkMTxd6qhVKh\u0027;\n\n\n// For Date Interation\nif(request.dateRange) {\n    url+\u003d `?startDate\u003d${request.dateRange.startDate}\u0026endDate\u003d${request.dateRange.endDate}`\n  }\n\n\n  // empty arrays for data\n  var dataSchema \u003d [];\n  var data \u003d [];\n  var values \u003d [];\n\n  request.fields.forEach(function (field) {\n    for (var i \u003d 0; i \u003c issSchema.length; i++) {\n      if (issSchema[i].name \u003d\u003d\u003d field.name) {\n        dataSchema.push(issSchema[i]);\n        break;\n      }\n    }\n  });\n\n  // Fetch the data\n  // include error handling\n  try {\n    var response \u003d JSON.parse(UrlFetchApp.fetch(url));\n  } catch (e) {\n    throw new Error(\"DS_USER: Unable to fetch the location data. Please try again later.\");\n  }\n\n  Logger.log(\"Response from API\");\n  Logger.log(response);\n\n  // turn epoch timestamp into human readable date\n  // var date \u003d new Date(response.timestamp * 1000);\n  // var dsDate \u003d date.toISOString().slice(0,10).replace(/-/g,\"\");\n\n  // select items from the response data to return to Data Studio\nresponse.forEach(item \u003d\u003e {\n    const value \u003d[];\n    dataSchema.forEach(function (field) {\n      switch (field.name) {\n        case \u0027state\u0027:\n          value.push(item.state);\n          break;\n        case \u0027regCount\u0027:\n          value.push(item.regCount);\n          break;\n        case \u0027winnerCount\u0027:\n          value.push(item.winnerCount);\n          break;\n        case \u0027addressFilledCount\u0027:\n          value.push(item.addressFilledCount);\n          break;\n        default:\n          value.push(\u0027\u0027);\n\n      }\n    })\n    values.push({values: value});\n  });\n\n  // data.push({\n  //   values: values\n  // });\n\n  Logger.log(\"Schema returned to Data Studio\");\n  Logger.log(dataSchema);\n\n  Logger.log(\"Data returned to Data Studio\");\n  Logger.log(values);\n\n  return {\n    schema: dataSchema,\n    rows: values\n  };\n\n}\n\n\n/**\n* Authentication\n*\n* @returns {object} containing the authentication method used by the connector.\n*/\nfunction getAuthType() {\n\n  var response \u003d {\n    \"type\": \"NONE\"\n  };\n\n  return response;\n\n}\n"}]}